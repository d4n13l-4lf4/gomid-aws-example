// Code generated by mockery v2.38.0. DO NOT EDIT.

package middleware

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Next is an autogenerated mock type for the Next type
type Next struct {
	mock.Mock
}

type Next_Expecter struct {
	mock *mock.Mock
}

func (_m *Next) EXPECT() *Next_Expecter {
	return &Next_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, _a1
func (_m *Next) Execute(_a0 context.Context, _a1 interface{}) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Next_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Next_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
func (_e *Next_Expecter) Execute(_a0 interface{}, _a1 interface{}) *Next_Execute_Call {
	return &Next_Execute_Call{Call: _e.mock.On("Execute", _a0, _a1)}
}

func (_c *Next_Execute_Call) Run(run func(_a0 context.Context, _a1 interface{})) *Next_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *Next_Execute_Call) Return(_a0 interface{}, _a1 error) *Next_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Next_Execute_Call) RunAndReturn(run func(context.Context, interface{}) (interface{}, error)) *Next_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewNext creates a new instance of Next. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNext(t interface {
	mock.TestingT
	Cleanup(func())
}) *Next {
	mock := &Next{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
